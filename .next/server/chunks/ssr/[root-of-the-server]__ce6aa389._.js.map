{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/crow0/OneDrive/Documents/claudecode/ai-skincare-predictor/app/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useRef } from 'react';\r\nimport Image from 'next/image';\r\n\r\nexport default function Home() {\r\n  const [originalImage, setOriginalImage] = useState<string | null>(null);\r\n  const [originalFile, setOriginalFile] = useState<File | null>(null);\r\n  const [aspectRatio, setAspectRatio] = useState<number>(1.0);\r\n  const [generatedImage, setGeneratedImage] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const compressImage = (file: File, quality: number = 0.8): Promise<File> => {\r\n    return new Promise((resolve) => {\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new window.Image();\r\n\r\n      img.onload = () => {\r\n        // Calculate and store aspect ratio\r\n        const ratio = img.width / img.height;\r\n        setAspectRatio(ratio);\r\n        \r\n        // Set canvas size to max 1024x1024 while maintaining aspect ratio\r\n        const maxSize = 1024;\r\n        let { width, height } = img;\r\n        \r\n        if (width > height) {\r\n          if (width > maxSize) {\r\n            height = (height * maxSize) / width;\r\n            width = maxSize;\r\n          }\r\n        } else {\r\n          if (height > maxSize) {\r\n            width = (width * maxSize) / height;\r\n            height = maxSize;\r\n          }\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        // Draw and compress\r\n        ctx?.drawImage(img, 0, 0, width, height);\r\n        \r\n        canvas.toBlob((blob) => {\r\n          if (blob) {\r\n            const compressedFile = new File([blob], file.name, {\r\n              type: 'image/png',\r\n              lastModified: Date.now(),\r\n            });\r\n            resolve(compressedFile);\r\n          } else {\r\n            resolve(file);\r\n          }\r\n        }, 'image/png', quality);\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      try {\r\n        // Compress the image before setting state\r\n        const compressedFile = await compressImage(file, 0.8);\r\n        setOriginalFile(compressedFile);\r\n        setOriginalImage(URL.createObjectURL(compressedFile));\r\n        setGeneratedImage(null);\r\n        setError(null);\r\n        \r\n        console.log(`Original size: ${(file.size / 1024).toFixed(2)}KB`);\r\n        console.log(`Compressed size: ${(compressedFile.size / 1024).toFixed(2)}KB`);\r\n        console.log(`Compression ratio: ${((1 - compressedFile.size / file.size) * 100).toFixed(1)}%`);\r\n      } catch (error) {\r\n        console.error('Image compression failed:', error);\r\n        // Fallback to original file\r\n        setOriginalFile(file);\r\n        setOriginalImage(URL.createObjectURL(file));\r\n        setGeneratedImage(null);\r\n        setError(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const generateFutureFace = async () => {\r\n    if (!originalFile) {\r\n      setError('まず画像をアップロードしてください。');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setGeneratedImage(null);\r\n    setImageLoaded(false);\r\n\r\n    const formData = new FormData();\r\n    formData.append('image', originalFile);\r\n    formData.append('aspectRatio', aspectRatio.toString());\r\n\r\n    try {\r\n      const response = await fetch('/api/generate-image', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || '画像の生成に失敗しました。');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setGeneratedImage(data.imageUrl);\r\n\r\n    } catch (err: unknown) {\r\n      setError(err instanceof Error ? err.message : '不明なエラーが発生しました。');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main className=\"font-sans max-w-4xl mx-auto p-5 text-center\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">肌トラブル予測シミュレーター</h1>\r\n      <p className=\"mb-8\">スキンケアを怠った場合の肌の状態をAIが予測します。<br/>\r\n        <small className=\"text-gray-600\">※適切なケアで予防可能な肌トラブルを表示</small></p>\r\n\r\n      <input\r\n        type=\"file\"\r\n        accept=\"image/png, image/jpeg\"\r\n        ref={fileInputRef}\r\n        onChange={handleImageUpload}\r\n        className=\"hidden\"\r\n      />\r\n      \r\n      <button \r\n        onClick={() => fileInputRef.current?.click()} \r\n        className=\"px-5 py-2.5 text-base bg-blue-500 text-white border-none rounded cursor-pointer hover:bg-blue-600 mb-8\"\r\n      >\r\n        画像を選択\r\n      </button>\r\n\r\n      <div className=\"flex justify-around gap-5 mb-8\">\r\n        <div className=\"flex-1\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">現在のあなた</h2>\r\n          {originalImage ? (\r\n            <div className=\"relative w-72 h-72 mx-auto\">\r\n              <Image\r\n                src={originalImage}\r\n                alt=\"Original\"\r\n                fill\r\n                sizes=\"(max-width: 768px) 100vw, 300px\"\r\n                className=\"object-cover border border-gray-300 rounded\"\r\n                priority\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"w-72 h-72 border border-dashed border-gray-300 flex items-center justify-center rounded mx-auto\">\r\n              ここに画像が表示されます\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex-1\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">ケア不足の肌 (AI予測)</h2>\r\n          {isLoading && <p className=\"text-gray-600\">AIが生成中です... (15秒〜30秒程度かかります)</p>}\r\n          {error && <p className=\"text-red-500\">エラー: {error}</p>}\r\n          {generatedImage ? (\r\n            <div className=\"relative w-72 h-72 mx-auto\">\r\n              {!imageLoaded && (\r\n                <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 border border-gray-300 rounded\">\r\n                  <p className=\"text-gray-500\">読み込み中...</p>\r\n                </div>\r\n              )}\r\n              <Image\r\n                src={generatedImage}\r\n                alt=\"Generated\"\r\n                fill\r\n                sizes=\"(max-width: 768px) 100vw, 300px\"\r\n                className=\"object-cover border border-gray-300 rounded\"\r\n                onLoad={() => setImageLoaded(true)}\r\n                priority\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"w-72 h-72 border border-dashed border-gray-300 flex items-center justify-center rounded mx-auto\">\r\n              ここに結果が表示されます\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {originalImage && (\r\n        <button \r\n          onClick={generateFutureFace} \r\n          disabled={isLoading} \r\n          className={`px-8 py-4 text-xl border-none rounded cursor-pointer ${\r\n            isLoading \r\n              ? 'bg-gray-400 text-white cursor-not-allowed' \r\n              : 'bg-blue-500 text-white hover:bg-blue-600'\r\n          }`}\r\n        >\r\n          {isLoading ? '生成中...' : '肌トラブルを予測する'}\r\n        </button>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,iNAAQ,EAAgB;IAClE,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAc;IAC9D,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAS;IACvD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,iNAAQ,EAAgB;IACpE,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAgB;IAClD,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAC;IAE/C,MAAM,eAAe,IAAA,+MAAM,EAAmB;IAE9C,MAAM,gBAAgB,CAAC,MAAY,UAAkB,GAAG;QACtD,OAAO,IAAI,QAAQ,CAAC;YAClB,MAAM,SAAS,SAAS,aAAa,CAAC;YACtC,MAAM,MAAM,OAAO,UAAU,CAAC;YAC9B,MAAM,MAAM,IAAI,OAAO,KAAK;YAE5B,IAAI,MAAM,GAAG;gBACX,mCAAmC;gBACnC,MAAM,QAAQ,IAAI,KAAK,GAAG,IAAI,MAAM;gBACpC,eAAe;gBAEf,kEAAkE;gBAClE,MAAM,UAAU;gBAChB,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG;gBAExB,IAAI,QAAQ,QAAQ;oBAClB,IAAI,QAAQ,SAAS;wBACnB,SAAS,AAAC,SAAS,UAAW;wBAC9B,QAAQ;oBACV;gBACF,OAAO;oBACL,IAAI,SAAS,SAAS;wBACpB,QAAQ,AAAC,QAAQ,UAAW;wBAC5B,SAAS;oBACX;gBACF;gBAEA,OAAO,KAAK,GAAG;gBACf,OAAO,MAAM,GAAG;gBAEhB,oBAAoB;gBACpB,KAAK,UAAU,KAAK,GAAG,GAAG,OAAO;gBAEjC,OAAO,MAAM,CAAC,CAAC;oBACb,IAAI,MAAM;wBACR,MAAM,iBAAiB,IAAI,KAAK;4BAAC;yBAAK,EAAE,KAAK,IAAI,EAAE;4BACjD,MAAM;4BACN,cAAc,KAAK,GAAG;wBACxB;wBACA,QAAQ;oBACV,OAAO;wBACL,QAAQ;oBACV;gBACF,GAAG,aAAa;YAClB;YAEA,IAAI,GAAG,GAAG,IAAI,eAAe,CAAC;QAChC;IACF;IAEA,MAAM,oBAAoB,OAAO;QAC/B,MAAM,OAAO,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;QACpC,IAAI,MAAM;YACR,IAAI;gBACF,0CAA0C;gBAC1C,MAAM,iBAAiB,MAAM,cAAc,MAAM;gBACjD,gBAAgB;gBAChB,iBAAiB,IAAI,eAAe,CAAC;gBACrC,kBAAkB;gBAClB,SAAS;gBAET,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,KAAK,IAAI,GAAG,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;gBAC/D,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,CAAC,eAAe,IAAI,GAAG,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;gBAC3E,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,IAAI,eAAe,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAC/F,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,6BAA6B;gBAC3C,4BAA4B;gBAC5B,gBAAgB;gBAChB,iBAAiB,IAAI,eAAe,CAAC;gBACrC,kBAAkB;gBAClB,SAAS;YACX;QACF;IACF;IAEA,MAAM,qBAAqB;QACzB,IAAI,CAAC,cAAc;YACjB,SAAS;YACT;QACF;QAEA,aAAa;QACb,SAAS;QACT,kBAAkB;QAClB,eAAe;QAEf,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC,SAAS;QACzB,SAAS,MAAM,CAAC,eAAe,YAAY,QAAQ;QAEnD,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,uBAAuB;gBAClD,QAAQ;gBACR,MAAM;YACR;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI;YACrC;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,kBAAkB,KAAK,QAAQ;QAEjC,EAAE,OAAO,KAAc;YACrB,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;QAChD,SAAU;YACR,aAAa;QACf;IACF;IAEA,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,8OAAC;gBAAE,WAAU;;oBAAO;kCAA0B,8OAAC;;;;;kCAC7C,8OAAC;wBAAM,WAAU;kCAAgB;;;;;;;;;;;;0BAEnC,8OAAC;gBACC,MAAK;gBACL,QAAO;gBACP,KAAK;gBACL,UAAU;gBACV,WAAU;;;;;;0BAGZ,8OAAC;gBACC,SAAS,IAAM,aAAa,OAAO,EAAE;gBACrC,WAAU;0BACX;;;;;;0BAID,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAA6B;;;;;;4BAC1C,8BACC,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,wIAAK;oCACJ,KAAK;oCACL,KAAI;oCACJ,IAAI;oCACJ,OAAM;oCACN,WAAU;oCACV,QAAQ;;;;;;;;;;qDAIZ,8OAAC;gCAAI,WAAU;0CAAkG;;;;;;;;;;;;kCAMrH,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAA6B;;;;;;4BAC1C,2BAAa,8OAAC;gCAAE,WAAU;0CAAgB;;;;;;4BAC1C,uBAAS,8OAAC;gCAAE,WAAU;;oCAAe;oCAAM;;;;;;;4BAC3C,+BACC,8OAAC;gCAAI,WAAU;;oCACZ,CAAC,6BACA,8OAAC;wCAAI,WAAU;kDACb,cAAA,8OAAC;4CAAE,WAAU;sDAAgB;;;;;;;;;;;kDAGjC,8OAAC,wIAAK;wCACJ,KAAK;wCACL,KAAI;wCACJ,IAAI;wCACJ,OAAM;wCACN,WAAU;wCACV,QAAQ,IAAM,eAAe;wCAC7B,QAAQ;;;;;;;;;;;qDAIZ,8OAAC;gCAAI,WAAU;0CAAkG;;;;;;;;;;;;;;;;;;YAOtH,+BACC,8OAAC;gBACC,SAAS;gBACT,UAAU;gBACV,WAAW,CAAC,qDAAqD,EAC/D,YACI,8CACA,4CACJ;0BAED,YAAY,WAAW;;;;;;;;;;;;AAKlC","debugId":null}}]
}